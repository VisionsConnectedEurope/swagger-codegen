package {{apiPackage}};

import {{modelPackage}}.*;

{{#imports}}import {{import}};
{{/imports}}

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.*;

import static org.springframework.http.MediaType.*;

@Controller
@RequestMapping(value = "{{contextPath}}", produces = {APPLICATION_JSON_VALUE})
@Api(value = "{{contextPath}}", description = "the {{baseName}} API")
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {

  private final Delegate delegate;

  @Autowired
  public {{classname}}(Delegate {{classname}}Delegate) {
    this.delegate = {{classname}}Delegate;
  }

  {{#operation}}

  @ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
    {{#authMethods}}@Authorization(value = "{{name}}"{{#isOAuth}}, scopes = {
      {{#scopes}}@AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{#hasMore}},
      {{/hasMore}}{{/scopes}}
      }{{/isOAuth}}){{#hasMore}},
    {{/hasMore}}{{/authMethods}}
  }{{/hasAuthMethods}})
  @ApiResponses(value = { {{#responses}} @ApiResponse(code = {{{code}}}, message = "{{{message}}}"){{#hasMore}},{{/hasMore}}{{/responses}} })
  @RequestMapping(value =  "{{{path}}}",
    {{#hasProduces}}produces = { {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }, {{/hasProduces}}
    {{#hasConsumes}}consumes = { {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} },{{/hasConsumes}}
    method = RequestMethod.{{httpMethod}})
  public ResponseEntity {{operationId}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}})  {
        try {
           Object result = delegate.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});
           if (result == null){
                return ResponseEntity.status(HttpStatus.NO_CONTENT.value()).body("");
           } else {
                return ResponseEntity.status(HttpStatus.OK.value()).body(result);
           }
        } catch (ApiException ex){
           Map<String,Object> errors = new HashMap<String,Object>();
           if (ex.getResponseBody() != null){
             errors.put("error", ex.getResponseBody());
           }
           if (ex.getErrorSpec() != null){
             errors.put("error", ex.getErrorSpec());
           }
           return ResponseEntity.status(ex.getHttpStatus().value()).body(errors);
        }
    }
  {{/operation}}

  public interface Delegate{
  {{#operation}}
    public {{>returnTypes}} {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}}) throws ApiException;

  {{/operation}}
  }
}
{{/operations}}
